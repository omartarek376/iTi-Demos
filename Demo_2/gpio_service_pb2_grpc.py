# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import gpio_service_pb2 as gpio__service__pb2


class GPIOServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadState = channel.unary_unary(
                '/GPIOService/ReadState',
                request_serializer=gpio__service__pb2.ReadStateRequest.SerializeToString,
                response_deserializer=gpio__service__pb2.ReadStateResponse.FromString,
                )
        self.SetOutput = channel.unary_unary(
                '/GPIOService/SetOutput',
                request_serializer=gpio__service__pb2.SetOutputRequest.SerializeToString,
                response_deserializer=gpio__service__pb2.SetOutputResponse.FromString,
                )
        self.ConfigurePin = channel.unary_unary(
                '/GPIOService/ConfigurePin',
                request_serializer=gpio__service__pb2.ConfigurePinRequest.SerializeToString,
                response_deserializer=gpio__service__pb2.ConfigurePinResponse.FromString,
                )


class GPIOServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetOutput(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ConfigurePin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GPIOServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadState': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadState,
                    request_deserializer=gpio__service__pb2.ReadStateRequest.FromString,
                    response_serializer=gpio__service__pb2.ReadStateResponse.SerializeToString,
            ),
            'SetOutput': grpc.unary_unary_rpc_method_handler(
                    servicer.SetOutput,
                    request_deserializer=gpio__service__pb2.SetOutputRequest.FromString,
                    response_serializer=gpio__service__pb2.SetOutputResponse.SerializeToString,
            ),
            'ConfigurePin': grpc.unary_unary_rpc_method_handler(
                    servicer.ConfigurePin,
                    request_deserializer=gpio__service__pb2.ConfigurePinRequest.FromString,
                    response_serializer=gpio__service__pb2.ConfigurePinResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GPIOService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GPIOService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GPIOService/ReadState',
            gpio__service__pb2.ReadStateRequest.SerializeToString,
            gpio__service__pb2.ReadStateResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetOutput(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GPIOService/SetOutput',
            gpio__service__pb2.SetOutputRequest.SerializeToString,
            gpio__service__pb2.SetOutputResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ConfigurePin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GPIOService/ConfigurePin',
            gpio__service__pb2.ConfigurePinRequest.SerializeToString,
            gpio__service__pb2.ConfigurePinResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
